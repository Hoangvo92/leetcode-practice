Add two number: https://leetcode.com/problems/add-two-numbers/
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Code:
python:
https://www.geeksforgeeks.org/add-two-numbers-represented-by-linked-lists/

# Python program to add two numbers represented by linked list 

# Node class 
class Node: 

	# Constructor to initialize the node object 
	def __init__(self, data): 
		self.data = data 
		self.next = None

class LinkedList: 

	# Function to initialize head 
	def __init__(self): 
		self.head = None

	# Function to insert a new node at the beginning 
	def push(self, new_data): 
		new_node = Node(new_data) 
		new_node.next = self.head 
		self.head = new_node 

	# Add contents of two linked lists and return the head 
	# node of resultant list 
	def addTwoLists(self, first, second): 
		prev = None
		temp = None
		carry = 0

		# While both list exists 
		while(first is not None or second is not None): 

			# Calculate the value of next digit in 
			# resultant list 
			# The next digit is sum of following things 
			# (i) Carry 
			# (ii) Next digit of first list (if ther is a 
			# next digit) 
			# (iii) Next digit of second list ( if there 
			# is a next digit) 
			fdata = 0 if first is None else first.data 
			sdata = 0 if second is None else second.data 
			Sum = carry + fdata + sdata 

			# update carry for next calculation 
			carry = 1 if Sum >= 10 else 0

			# update sum if it is greater than 10 
			Sum = Sum if Sum < 10 else Sum % 10

			# Create a new node with sum as data 
			temp = Node(Sum) 

			# if this is the first node then set it as head 
			# of resultant list 
			if self.head is None: 
				self.head = temp 
			else : 
				prev.next = temp 

			# Set prev for next insertion 
			prev = temp 

			# Move first and second pointers to next nodes 
			if first is not None: 
				first = first.next
			if second is not None: 
				second = second.next

		if carry > 0: 
			temp.next = Node(carry) 

	# Utility function to print the linked LinkedList 
	def printList(self): 
		temp = self.head 
		while(temp): 
			print temp.data, 
			temp = temp.next

# Driver program to test above function 
first = LinkedList() 
second = LinkedList() 

# Create first list 
first.push(6) 
first.push(4) 
first.push(9) 
first.push(5) 
first.push(7) 
print "First List is ", 
first.printList() 

# Create second list 
second.push(4) 
second.push(8) 
print "\nSecond List is ", 
second.printList() 

# Add the two lists and see result 
res = LinkedList() 
res.addTwoLists(first.head, second.head) 
print "\nResultant list is ", 
res.printList() 

# This code is contributed by Nikhil Kumar Singh(nickzuck_007) 



https://medium.com/@nicolabernini_63880/leetcode-solution-sum-two-numbers-in-linked-list-representation-fde580f97c5f
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
Add Two Numbers - LeetCode
Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared…
leetcode.com
Explanation
There are 2 possible approaches
Conversions based
Porting Arithmetic into the original representation
1. Conversion based
Operations are representation / type specific: for example, C and C++ provide an implementation for sum operation for numeric types (int, float, …) but it’s not possible to sum 2 numbers represented as strings (not to be confused with the fact the operator ‘+’ on string can be used to perform concatenation, the focus is on the arithmetic operator)
In order to be able to sum them, a string to numeric conversion needs to be performed first and this is typically a good approach as the internal parsing is able to catch valid strings which have meaningless numeric representation before entering the actual operation
Using this approach for this problem, would mean
spend O(N) converting the linked lists into a big enough numeric type (e.g. unsigned long int)
sum the numeric types using the language support
spend O(N) converting back from the numeric type to the linked list
Letting the complexity aside, this approach can have scalability issues related to the fact the internal numeric representation could be a bottleneck as it might not be able to represent very big numbers resulting both from conversion and the sum operation
2. Porting Arithmetic
This approach does not rely on any type conversion, instead it consists of implementing the sum arithmetic directly on the Linked List representation
This solution is certainly much more scalable as it is not affected by the language specific numeric type limits
The tricky thing here is each node in the linked list represents one digit only but sum can overflow as for example 9+2 = 11 (it’s 2 digit and not just 1)
The carry needs to be ported as an additional term into the next digit sum but let’s pay attention to the fact the linked list allows cheap iteration in one direction only (it’s not a double linked list)
So does linked list allow to implement carry efficiently or will we need a conversion step to use an other data structure because of carry, ultimately getting to an hybrid solution between the 2 types ?
Fortunately, this specific apparently reversed representation is carry-friendly: typically numbers have the most significant digit leftmost while this linked list has less significant digit at its root, it means when we sum elements a[i] and b[i] we get both d[i] the corresponding final digit and the r[i+1] which is the carry term to be added to the next element which is more significant and the next in the linked list
We can hence compute the sum result directly operating in the linked list representation efficiently as we are on linear complexity which is optimal (we have to observe each digit at least once to compute)
Solution
You can find my solution relying on the 2 approach and implemented in CPP here


// Original Link 
// https://leetcode.com/problems/add-two-numbers/submissions/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */


/**
  * @brief Solution 
  * 
  * @note There are 2 possible approaches 
  * 1) Convert the Linked List representation into an actual number representation (e.g. unsigned long int) and use the low level support for arithmetic then convert it back to Linked List 
  * 2) Implement the arithmetic to work directly on the Linked List representation 
  * The solution relies on this second approach as it is much more efficient 
  */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {     
        return list_sum(l1, l2); 
    }
    
    private:     
    ListNode* list_sum(const ListNode* a, const ListNode* b)
    {
        int t_res = a->val + b->val; 
        int r=t_res/10; 
        auto root = new ListNode(t_res%10); 
        auto last = root; 
        a = a->next; 
        b = b->next; 
        
        while((a != nullptr) || (b != nullptr))
        {
            int t_a=0; 
            int t_b=0; 
            
            if(a!=nullptr)
            {
                t_a = a->val; 
                a = a->next; 
            }
            
            if(b!=nullptr)
            {
                t_b = b->val; 
                b = b->next; 
            }
            int t_res = t_a+t_b+r; 
            r = t_res/10; 
            last->next = new ListNode(t_res%10); 
            last = last->next; 
        }
        if(r>0) last->next = new ListNode(r);
        
        return root; 
    }
    
};



// Original Link 
// https://leetcode.com/problems/add-two-numbers/submissions/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */


/**
  * @brief Solution 
  * 
  * @note There are 2 possible approaches 
  * 1) Convert the Linked List representation into an actual number representation (e.g. unsigned long int) and use the low level support for arithmetic then convert it back to Linked List 
  * 2) Implement the arithmetic to work directly on the Linked List representation 
  * The solution relies on this second approach as it is much more efficient 
  */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {     
        return list_sum(l1, l2); 
    }
    
    private:     
    ListNode* list_sum(const ListNode* a, const ListNode* b)
    {
        int t_res = a->val + b->val; 
        int r=t_res/10; 
        auto root = new ListNode(t_res%10); 
        auto last = root; 
        a = a->next; 
        b = b->next; 
        
        while((a != nullptr) || (b != nullptr))
        {
            int t_a=0; 
            int t_b=0; 
            
            if(a!=nullptr)
            {
                t_a = a->val; 
                a = a->next; 
            }
            
            if(b!=nullptr)
            {
                t_b = b->val; 
                b = b->next; 
            }
            int t_res = t_a+t_b+r; 
            r = t_res/10; 
            last->next = new ListNode(t_res%10); 
            last = last->next; 
        }
        if(r>0) last->next = new ListNode(r);
        
        return root; 
    }
    
};



  
