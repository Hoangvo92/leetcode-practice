You are given a pointer/ reference to the node which is to be deleted from the linked list of N nodes. The task is to delete the node. Pointer/ reference to head node is not given. 

Note: No head reference is given to you.

Input Format:
First line of input contains number of testcases T. For each testcase, first line of input contains length of linked list and next line contains the data of the linked list. The last line contains the node to be deleted.

Output Format:
For each testcase, in a newline, print the linked list after deleting the given node.

Your Task:
This is a function problem. You only need to complete the function deleteNode that takes reference to the node that needs to be deleted. The printing is done automatically by the driver code.

Constraints:
1 <= T <= 100
1 <= N <= 103

Example:
Input:
2
2
1 2
1
4
10 20 4 30
20

Output:
2
10 4 30

Explanation:
Testcase 1: After deleting 20 from the linked list, we have remaining nodes as 10, 4 and 30.


A simple solution is to traverse the linked list until you find the node you want to delete. But this solution requires pointer to the head node which contradicts the problem statement.

Fast solution is to copy the data from the next node to the node to be deleted and delete the next node. Something like following.

    // Find next node using next pointer
    struct Node *temp  = node_ptr->next;

    // Copy data of next node to this node
    node_ptr->data  = temp->data;

    // Unlink next node
    node_ptr->next  = temp->next;

    // Delete next node
    free(temp);

Answer: Python code:

# a class to define a node with 
# data and next pointer 
class Node(): 

	# constructor to initialize a new node 
	def __init__(self, val = None): 
		self.data = val 
		self.next = None

# push a node to the front of the list 
def push(head, val): 

	# allocate new node 
	newnode = Node(val) 

	# link the first node of the old list to the new node 
	newnode.next = head.next

	# make the new node as head of the linked list 
	head.next = newnode 

# function to print the list 
def print_list(head): 

	temp = head.next
	while(temp != None): 
		print(temp.data, end = ' ') 
		temp = temp.next
	print() 

# function to delete the node 
# the main logic is in this 
def delete_node(node): 

	prev = Node() 

	if(node == None): 
		return
	else: 
		while(node.next != None): 
			node.data = node.next.data 
			prev = node 
			node = node.next

		prev.next = None


if __name__ == '__main__': 

	# allocate an empty header node 
	# this is a node that simply points to the 
	# first node in the list 
	head = Node() 

	# construct the below linked list 
	# 1->12->1->4->1 
	push(head, 1) 
	push(head, 4) 
	push(head, 1) 
	push(head, 12) 
	push(head, 1) 

	print('list before deleting:') 
	print_list(head) 

	# deleting the first node in the list 
	delete_node(head.next) 

	print('list after deleting: ') 
	print_list(head) 

Answer C++:
#include <bits/stdc++.h> 
using namespace std; 

/* Link list node */
class Node { 
public: 
	int data; 
	Node* next; 
}; 

/* Given a reference (pointer to pointer) to the head 
	of a list and an int, push a new node on the front 
	of the list. */
void push(Node** head_ref, int new_data) 
{ 
	/* allocate node */
	Node* new_node = new Node(); 

	/* put in the data */
	new_node->data = new_data; 

	/* link the old list off the new node */
	new_node->next = (*head_ref); 

	/* move the head to point to the new node */
	(*head_ref) = new_node; 
} 

void printList(Node* head) 
{ 
	Node* temp = head; 
	while (temp != NULL) { 
		cout << temp->data << " "; 
		temp = temp->next; 
	} 
} 

void deleteNode(Node* node) 
{ 
	Node* prev; 
	if (node == NULL) 
		return; 
	else { 
		while (node->next != NULL) { 
			node->data = node->next->data; 
			prev = node; 
			node = node->next; 
		} 
		prev->next = NULL; 
	} 
} 

/* Driver code*/
int main() 
{ 
	/* Start with the empty list */
	Node* head = NULL; 

	/* Use push() to construct below list 
	1->12->1->4->1 */
	push(&head, 1); 
	push(&head, 4); 
	push(&head, 1); 
	push(&head, 12); 
	push(&head, 1); 

	cout << "Before deleting \n"; 
	printList(head); 

	/* I m deleting the head itself. 
		You can check for more cases */
	deleteNode(head); 

	cout << "\nAfter deleting \n"; 
	printList(head); 
	return 0; 
} 



Answer: Java
class LinkedList { 
	Node head; // head of the list 

	class Node { 
		int data; 
		Node next; 
		Node(int d) 
		{ 
			data = d; 
			next = null; 
		} 
	} 

	/* Given a reference to the head of a list and an int, 
		inserts a new Node on the front of the list. */
	public void push(int new_data) 
	{ 
		/* 1. alloc the Node and put the data */
		Node new_Node = new Node(new_data); 

		/* 2. Make next of new Node as head */
		new_Node.next = head; 

		/* 3. Move the head to point to new Node */
		head = new_Node; 
	} 

	/* This function prints contents of linked list 
		starting from the given Node */
	public void printList() 
	{ 
		Node tNode = head; 
		while (tNode != null) { 
			System.out.print(tNode.data + " "); 
			tNode = tNode.next; 
		} 
	} 

	public void deleteNode(Node Node_ptr) 
	{ 
		Node temp = Node_ptr.next; 
		Node_ptr.data = temp.data; 
		Node_ptr.next = temp.next; 
		temp = null; 
	} 

	public static void main(String[] args) 
	{ 
		LinkedList llist = new LinkedList(); 

		/* Use push() to construct below list 
		1->12->1->4->1 */
		llist.push(1); 
		llist.push(4); 
		llist.push(1); 
		llist.push(12); 
		llist.push(1); 

		System.out.println("Before deleting"); 
		llist.printList(); 

		/* I m deleting the head itself. 
		You can check for more cases */
		llist.deleteNode(llist.head); 

		System.out.println("\nAfter Deleting"); 
		llist.printList(); 
	} 
} 



