https://practice.geeksforgeeks.org/problems/root-to-leaf-paths-sum/1
Given a binary tree, where every node value is a number. Find the sum of all the numbers which are formed from root to leaf paths.

For example consider the following Binary Tree.

           6                               
         /   \                          
        3     5                      
      /   \     \
     2    5      4             
        /  \                        
       7    4                 
            
  There are 4 leaves, hence 4 root to leaf paths:
  Path                      Number
  6->3->2                   600+30+2=632
  6->3->5->7                6000+300+50+7=6357
  6->3->5->4                6000+300+50+4=6354
  6->5>4                    600+50+4=654   
Answer = 632 + 6357 + 6354 + 654 = 13997 
Input Format:
The task is to complete the method which takes one argument, root of Binary Tree. The Node has a data part which stores the data, pointer to left child and pointer to right child. There are multiple test cases. For each test case, this method will be called individually.

Output Format:
The function should return sum of all the numbers which are formed from root to leaf paths.

Your Task:
Don't take any input/output. Just complete the function treePathsSum.


Your Task:
Don't take any input/output. Just complete the function treePathsSum.

Constraints:
1 <=T<= 30
1 <=Number of nodes<= 100
1 <=Data of a node<= 1000

Example:
Input:
2
2
1 2 L 1 3 R
4
10 20 L 10 30 R 20 40 L 20 60 R

Output:
25
2630

Explanation:



# Python program to find sum of all paths from root to leaves 
  
# A Binary tree node 
class Node: 
  
    # Constructor to create a new node 
    def __init__(self, data): 
        self.data = data 
        self.left = None
        self.right = None
  
# Returs sums of all root to leaf paths. The first parameter is root 
# of current subtree, the second paramete"r is value of the number 
# formed by nodes from root to this node 
def treePathsSumUtil(root, val): 
  
    # Base Case 
    if root is None: 
        return 0
  
    # Update val 
    val = (val*10 + root.data) 
  
    # If current node is leaf, return the current value of val 
    if root.left is None and root.right is None: 
        return val 
  
    # Recur sum of values for left and right subtree 
    return (treePathsSumUtil(root.left, val) + 
            treePathsSumUtil(root.right, val)) 
  
# A wrapper function over treePathSumUtil() 
def treePathsSum(root): 
      
    # Pass the initial value as 0 as ther is nothing above root 
    return treePathsSumUtil(root, 0) 
    
    
# Driver function to test above function 
root = Node(6) 
root.left = Node(3) 
root.right = Node(5) 
root.left.left = Node(2) 
root.left.right = Node(5) 
root.right.right = Node(4) 
root.left.right.left = Node(7) 
root.left.right.right = Node(4) 
print "Sum of all paths is", treePathsSum(root) 


