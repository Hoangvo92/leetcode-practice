https://practice.geeksforgeeks.org/problems/rotate-a-2d-array-without-using-extra-space/0

Rotate a 2D array without using extra space
You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

You need to do this in place.

Note that if you end up using an additional array, you will only receive partial score.

Example:

If the array is 

1 2 3 4 5 6 7 8 9

Then the rotated array becomes: 

7 4 1 8 5 2 9 6 3

Input:

The first line contains an integer 'T' denoting the total number of test cases.
In each test cases, the first line contains an integer 'N' denoting the size of the 2D square matrix.

And in the second line, the elements of the matrix A[][], each separated by a space in row major form.


Output:

For each test case, print the elements of the rotated array row wise, each element separated by a space. Print the output of each test case in a new line.

Explain:
Let size of row and column be 3.
During first iteration –
a[i][j] = Element at first index (leftmost corner top)= 1.

a[j][n-1-i]= Rightmost corner top Element = 3.

a[n-1-i][n-1-j] = Righmost corner bottom element = 9.

a[n-1-j][i] = Leftmost corner bottom element = 7.

Move these elements in the clockwise direction.

During second iteration –
a[i][j] = 2.

a[j][n-1-j] = 6.

a[n-1-i][n-1-j] = 8.

a[n-1-j][i] = 4.
Similarly, move these elements in the clockwise direction.


# Function to rotate the matrix 
# 90 degree clockwise 
def rotate90Clockwise(A): 
    N = len(A[0]) 
    for i in range(N // 2): 
        for j in range(i, N - i - 1): 
            temp = A[i][j] 
            A[i][j] = A[N - 1 - j][i] 
            A[N - 1 - j][i] = A[N - 1 - i][N - 1 - j] 
            A[N - 1 - i][N - 1 - j] = A[j][N - 1 - i] 
            A[j][N - 1 - i] = temp 
  
# Function to print the matrix 
def printMatrix(A): 
    N = len(A[0]) 
    for i in range(N): 
        print(A[i]) 
  
# Driver code 
A = [[1, 2, 3, 4], 
     [5, 6, 7, 8],  
     [9, 10, 11, 12],  
     [13, 14, 15, 16]] 
rotate90Clockwise(A) 













# Python 3 program for left rotation of matrix by 90 
# degree without using extra space 

R = 4
C = 4

# After transpose we swap elements of column 
# one by one for finding left rotation of matrix 
# by 90 degree 
def reverseColumns(arr): 
	for i in range(C): 
		j = 0
		k = C-1
		while j < k: 
			t = arr[j][i] 
			arr[j][i] = arr[k][i] 
			arr[k][i] = t 
			j += 1
			k -= 1
	
# Function for do transpose of matrix 
def transpose(arr): 
	for i in range(R): 
		for j in range(i, C): 
			t = arr[i][j] 
			arr[i][j] = arr[j][i] 
			arr[j][i] = t 

# Function for print matrix 
def printMatrix(arr): 
	for i in range(R): 
		for j in range(C): 
			print(str(arr[i][j]), end =" ") 
		print() 

# Function to anticlockwise rotate matrix 
# by 90 degree 
def rotate90(arr): 
	transpose(arr) 
	reverseColumns(arr) 

# Driven code 
arr = [[1, 2, 3, 4], 
		[5, 6, 7, 8], 
		[9, 10, 11, 12], 
		[13, 14, 15, 16] 
	]; 
rotate90(arr) 
printMatrix(arr) 




// C++ program for left rotation of matrix by 90 
// degree without using extra space 
#include <bits/stdc++.h> 
using namespace std; 
#define R 4 
#define C 4 

// After transpose we swap elements of column 
// one by one for finding left rotation of matrix 
// by 90 degree 
void reverseColumns(int arr[R][C]) 
{ 
	for (int i = 0; i < C; i++) 
		for (int j = 0, k = C - 1; j < k; j++, k--) 
			swap(arr[j][i], arr[k][i]); 
} 

// Function for do transpose of matrix 
void transpose(int arr[R][C]) 
{ 
	for (int i = 0; i < R; i++) 
		for (int j = i; j < C; j++) 
			swap(arr[i][j], arr[j][i]); 
} 

// Function for print matrix 
void printMatrix(int arr[R][C]) 
{ 
	for (int i = 0; i < R; i++) { 
		for (int j = 0; j < C; j++) 
			cout << arr[i][j] << " "; 
		cout << '\n'; 
	} 
} 

// Function to anticlockwise rotate matrix 
// by 90 degree 
void rotate90(int arr[R][C]) 
{ 
	transpose(arr); 
	reverseColumns(arr); 
} 

// Driven code 
int main() 
{ 
	int arr[R][C] = { { 1, 2, 3, 4 }, 
					{ 5, 6, 7, 8 }, 
					{ 9, 10, 11, 12 }, 
					{ 13, 14, 15, 16 } }; 
	rotate90(arr); 
	printMatrix(arr); 
	return 0; 
} 
